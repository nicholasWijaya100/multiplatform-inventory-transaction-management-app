// Mocks generated by Mockito 5.4.4 from annotations
// in inventory_app_revised/test/unit/blocs/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:inventory_app_revised/data/models/product_model.dart' as _i2;
import 'package:inventory_app_revised/data/repositories/product_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductModel_0 extends _i1.SmartFake implements _i2.ProductModel {
  _FakeProductModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ProductModel>> getProducts({
    String? searchQuery,
    String? categoryFilter,
    bool? includeInactive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {
            #searchQuery: searchQuery,
            #categoryFilter: categoryFilter,
            #includeInactive: includeInactive,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.ProductModel>>.value(<_i2.ProductModel>[]),
      ) as _i4.Future<List<_i2.ProductModel>>);

  @override
  _i4.Future<List<String>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<_i2.ProductModel> addProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.ProductModel>.value(_FakeProductModel_0(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.ProductModel>);

  @override
  _i4.Future<void> updateProduct(_i2.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateProductStatus(
    String? productId,
    bool? isActive,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProductStatus,
          [
            productId,
            isActive,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateStock(
    String? productId,
    String? warehouseId,
    int? quantity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStock,
          [
            productId,
            warehouseId,
            quantity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.ProductModel>> getProductsStream() => (super.noSuchMethod(
        Invocation.method(
          #getProductsStream,
          [],
        ),
        returnValue: _i4.Stream<List<_i2.ProductModel>>.empty(),
      ) as _i4.Stream<List<_i2.ProductModel>>);
}
